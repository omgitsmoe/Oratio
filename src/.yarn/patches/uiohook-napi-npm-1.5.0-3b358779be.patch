diff --git a/package.json b/package.json
index 16778ffeaf591c51bb76d06817e763d24fb22488..16a95243d661ba0b130d6cdf600b08b25363b31a 100644
--- a/package.json
+++ b/package.json
@@ -21,7 +21,7 @@
   "main": "dist/index.js",
   "types": "dist/index.d.ts",
   "scripts": {
-    "install": "node-gyp-build",
+    "install": "node-gyp rebuild",
     "prebuild": "prebuildify --napi",
     "build-ts": "tsc",
     "demo": "ts-node src/demo.ts",
diff --git a/src/lib/addon.c b/src/lib/addon.c
index d4dffe9e74cb2da2dbb99b65dd92173702f8beb7..061ac149f995757f8918e590909ff6aa65ddee04 100644
--- a/src/lib/addon.c
+++ b/src/lib/addon.c
@@ -17,6 +17,31 @@ void dispatch_proc(uiohook_event* const event) {
     copied_event->type = EVENT_MOUSE_MOVED;
   }
 
+  if ((event->type == EVENT_KEY_TYPED || event->type == EVENT_KEY_PRESSED || event->type == EVENT_KEY_RELEASED)) {
+    // stop original __keyboard__ event from being propagated to other apps
+    // NOTE: libuihook didn't wrap the macro expression for the MASK_* in () like you should,
+    //       so we need to do it every time we use one of the mask macros
+    // NOTE: since we ust Ctrl+L as hotkey, the initial Ctrl gets received
+    // but the keyup for Ctrl does not get sent, if we block all keys
+    // -> make sure we propagate all modifier keys
+    uint16_t keycode = event->data.keyboard.keycode;
+    switch (keycode) {
+      case VC_CONTROL_L:
+      case VC_CONTROL_R:
+      case VC_SHIFT_L:
+      case VC_SHIFT_R:
+      case VC_META_L:
+      case VC_META_R:
+      case VC_ALT_L:
+      case VC_ALT_R:
+        break;
+      default:
+        event->reserved = 1;
+        break;
+    }
+  }
+
+
   napi_status status = napi_call_threadsafe_function(threadsafe_fn, copied_event, napi_tsfn_nonblocking);
   if (status == napi_closing) {
     threadsafe_fn = NULL;
